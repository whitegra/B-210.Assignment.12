# -*- coding: utf-8 -*-
"""Assignment #12: I/O

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LQLDzLqT9Zoth6-V_GABdOh7rT1M9Fii
"""

# to start, import pandas. I know we have not learned this in class, but it makes more sense for this problem
import pandas as pd

# FIRST: create pandas dataframe (and csv file) for airport codes mapping to corresponding state and city:

# read csv(s) and create pandas dataframe(s)
stations_data_df = pd.read_csv('Stations.csv')
complete_data_df = pd.read_csv('CompleteData.csv')

# SECOND: prompt user to enter the number of cities they want to learn about:

cities = int(input("enter the number of popular cities you would like to know about: "))

# THIRD: create pandas dataframe (and csv file) for airport codes mapping to corresponding state and city:

# for the new stations dataset, we're only interested in these columns:
new_stations_df = stations_data_df[['AIRPORT',  'AIRPORT_STATE_NAME', 'DISPLAY_AIRPORT_CITY_NAME_FULL']]
# now to rename the columns in the new dataset: you can use '.columns' in pandas to specify this:
new_stations_df.columns = ['airport_code', 'airport_state', 'airport_city']
# now to create the actual file using .csv in pandas:
new_stations_df.to_csv('stations_sorted.csv', index=False) # DO NOT ADD AN =, IT"S AN ARGUMENT
# in pandas, you have to include false index or else it will add a column to correspond to row numbers in the csv and that is not needed.

# FOURTH: from complete_data file, count the values (number of times) an airport code appears for departures and arrivals:
departure_counts = complete_data_df['ORIGIN'].value_counts().reset_index(name='departures') # reset index to new column naming, count values in dataframe, add to dataframe
departure_counts.columns = ['airport_code', 'departures'] # new column names for this dataframe
arrival_counts = complete_data_df['DEST'].value_counts().reset_index(name='arrivals') # same
arrival_counts.columns = ['airport_code', 'arrivals'] #same

# FIFTH: merge data from departures and arrivals into the new stations dataset to map the corresponding city and state locations to seperate files:
         # I am merging on the "airport_codes" column, since there are matching values in the complete data sheet. Merge left using "how" function to ensure proper indexing,
         # and to ensure that it merges in the correct column (far left)
airport_departure_data = pd.merge(departure_counts, new_stations_df, on='airport_code', how='left')
airport_arrival_data = pd.merge(arrival_counts, new_stations_df, on='airport_code', how='left')

# Now, create two seperate files with the departing and arrivial information:

   # first, only include the number of data points as specified by the user in the 'cities' variable(n):
   # I don't know what a tsv file is, so I did have to look it up. It's just a tab seperated csv file, so you can include 'sep' function and '/t' to seperate by tabs in csv
   # same issue as before, index=False to avoid unwanted indexing in pandas file
airport_departure_data.head(cities).to_csv('popular_departing_airports.tsv', sep='\t', index=False) # 'head' is like a headcount. it just takes the top n values from dataset, like slicing
airport_arrival_data.head(cities).to_csv('popular_arriving_airports.tsv', sep='\t', index=False)